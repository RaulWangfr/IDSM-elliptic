load "gsl";
include "getARGV.idp"

real noiseLevel = 0.1;
real alpha = 0.1;
int storeNum = 22;
string lowrank = getARGV("-lowrank", "BFG");

verbosity = 0;
real FemErr = 1e-9;

int dataNum = 1;
func f0 = x;
func f1 = y;

func uIndicator = max(0.2000001^2 - (x-0.6)^2 - (y+0.1)^2,
                      0.2000001^2 - (x+0.6)^2 - (y-0.2)^2);
func uOrigin = 10* (abs(uIndicator)/uIndicator + 1)* (0.5* abs(x+1e-10)/x + 1.5);

macro Grad(u)[dx(u), dy(u)]//

int nSolve = 500;
border bound(t=0,1){x = cos(2* pi* t); y = 0.8* sin(2* pi* t); label = 1;};
mesh Th = buildmesh(bound(nSolve));

int nPlot = 200;
real[int] finePosx((nPlot+1)*(nPlot+1));
real[int] finePosy((nPlot+1)*(nPlot+1));
for(int i = 0; i <= nPlot; i++)
{
    for(int j = 0; j <= nPlot; j++){
        int index = i*(nPlot+1) + j;
        finePosx[index] = i*2.0/nPlot-1.0;
        finePosy[index] = j*2.0/nPlot-1.0;
    }
}
mesh Thplot = triangulate(finePosx, finePosy);

int uBoundaryNum = 1;
int boundaryFine = 1000;
for(int i = 1; i < boundaryFine; i++)
{
    for(int j = 1; j < boundaryFine; j++){
        int uMeanValue = 0;
        for(int i1 = -1; i1 <= 1; i1++){
        for(int j1 = -1; j1 <= 1; j1++){
        if(i1 != j1){
            if(uIndicator((i+i1)*2.0/boundaryFine-1.0, (j+j1)*2.0/boundaryFine-1.0)>0)
            {
                uMeanValue = uMeanValue + 1;
            }
        }}}
        if((uMeanValue == 3) ||(uMeanValue == 4) || (uMeanValue == 5)){
            uBoundaryNum++;
        }
    }
}

real[int] uBoundaryX(uBoundaryNum);
real[int] uBoundaryY(uBoundaryNum);
int uLocalIndex = 0;
for(int i = 1; i < boundaryFine; i++)
{
    for(int j = 1; j < boundaryFine; j++){
        int uMeanValue = 0;
        for(int i1 = -1; i1 <= 1; i1++){
        for(int j1 = -1; j1 <= 1; j1++){
        if(i1 != j1){
            if(uIndicator((i+i1)*2.0/boundaryFine-1.0, (j+j1)*2.0/boundaryFine-1.0)>0)
            {
                uMeanValue = uMeanValue + 1;
            }
        }}}
        if((uMeanValue == 3) ||(uMeanValue == 4) || (uMeanValue == 5)){
            uBoundaryX(uLocalIndex) = i*2.0/boundaryFine-1.0;
            uBoundaryY(uLocalIndex) = j*2.0/boundaryFine-1.0;
            uLocalIndex++;
        }
    }
}

fespace P0solve(Th, P0);
fespace P1solve(Th, P1);
fespace PlotSpace(Thplot, P0);

PlotSpace pic;
P0solve[int] fData(2);
P1solve[int] yOmega(dataNum), yU(dataNum), yData(dataNum), yC(dataNum);
P0solve uGuess = 0.0001;

func int plotSave(string filename)
{
    ofstream file("./plotfile/" + filename + ".xyz");
    file << Thplot.nv + uBoundaryNum - 1 << endl;
    file << filename << endl;
    for(int i = 0; i < Thplot.nv; i++)
    {
        file << 0 << " " << Thplot(i).x << " " << Thplot(i).y << " " 
             << 0 << " " << pic(Thplot(i).x, Thplot(i).y) << endl;
    }
    for(int i = 0; i < (uBoundaryNum - 1); i++)
    {
        if(uBoundaryX(i) < 0.0){
            file << 1 << " " << uBoundaryX(i) << " " << uBoundaryY(i) << " " 
                << 1 << " " << 0.0 << endl;
        }else{
            file << 2 << " " << uBoundaryX(i) << " " << uBoundaryY(i) << " " 
                << 1 << " " << 0.0 << endl;
        }
    }
    return 0;
}

fData[0] = f0;
// fData[1] = f1;
for(int k = 0; k < dataNum; k++)
{
    P1solve unknown, p1test;
    problem PDEConstrain(unknown, p1test, solver = Cholesky)
            = int2d(Th)(Grad(unknown)'* Grad(p1test))
            + int2d(Th)(unknown* p1test)
            + int2d(Th)(uOrigin* abs(yOmega[k])* unknown* p1test)
            - int2d(Th)(fData[k]* p1test);
    while(true)
    {
        PDEConstrain;
        real err = sqrt(int2d(Th)((unknown - yOmega[k])^2));
        yOmega[k] = unknown;
        if(err < FemErr* 0.5){break;}
    }

    problem GuessEquation(unknown, p1test, solver = Cholesky)
            = int2d(Th)(Grad(unknown)'* Grad(p1test))
            + int2d(Th)(unknown* p1test)
            + int2d(Th)(uGuess* abs(yU[k])* unknown* p1test)
            - int2d(Th)(fData[k]* p1test);
    while(true)
    {
        GuessEquation;
        real err = sqrt(int2d(Th)((unknown - yU[k])^2));
        yU[k] = unknown;
        if(err < FemErr* 0.5){break;}
    }

    problem EmptyEquation(unknown, p1test, solver = Cholesky)
        = int2d(Th)(Grad(unknown)'* Grad(p1test))
        + int2d(Th)(unknown* p1test)
        - int2d(Th)(fData[k]* p1test);
    EmptyEquation;
    yC[k] = unknown;

    real boundaryMax = yOmega[k][].min;
    real boundaryMin = yOmega[k][].max;
    for(int i = 0; i < nSolve; i++)
    {
        real theta = 2* pi* i/real(nSolve);
        boundaryMax = max(boundaryMax, yOmega[k](cos(theta), sin(theta)));
        boundaryMin = min(boundaryMin, yOmega[k](cos(theta), sin(theta)));
    }

    for(int i = 0; i < P1solve.ndof; i++){
        real noise = (2.0* randreal2() - 1.0)* noiseLevel;
        yData[k][][i] = yOmega[k][][i] + abs(yOmega[k][][i] - yC[k][][i])* noise;
    }
}

real residual = 0.0;
for(int k = 0; k < dataNum; k++)
{
    residual = residual + int1d(Th)((yU[k] - yData[k])^2);
}
residual = sqrt(residual);
{
    ofstream file("./residual.txt");
    file << residual << " " << -1 << endl;
}

P0solve diagFunc;
{
    P0solve p0x = x;
    P0solve p0y = y;
    for(int i = 0; i < P0solve.ndof; i++){
        real xpos = p0x[](i);
        real ypos = p0y[](i);
        diagFunc[](i) = 100;
        for(int thetaIndex = 0; thetaIndex < 100; thetaIndex++)
        {
            real disI = sqrt((xpos - cos(2* pi* thetaIndex/ real(100)))^2
                            +(ypos - 0.8* sin(2* pi* thetaIndex/ real(100)))^2) + 1e-10;
            diagFunc[](i) = min(diagFunc[](i), disI);
        }
        diagFunc[](i) = diagFunc[](i)^1.0;
    }
}
real[int, int] sStore(P0solve.ndof, storeNum);
real[int, int] yStore(P0solve.ndof, storeNum);
real[int, int] ryStore(P0solve.ndof, storeNum);
for(int j = 0; j < storeNum; j++){
for(int i = 0; i < P0solve.ndof; i++){
    sStore(i, j) = 0.0;
    yStore(i, j) = 0.0;
    ryStore(i, j) = 0.0;
}
}

int storeCount = 0;
func real[int] Rsolver(real[int] &input)
{
    if(lowrank == "DFP")
    {
        real[int] result = input;
        for(int i = 0; i < P0solve.ndof; i++)
        {
            result(i) = result(i)* diagFunc[](i);
        }
        for(int j = 0; j < storeCount; j++)
        {
            real[int] sj = sStore(:, j);
            real[int] yj = yStore(:, j);
            real[int] ryj = ryStore(:, j);
            result = result + ((input'* sj)/(sj'* yj))* sj;
            result = result - ((input'* ryj)/ (yj'* ryj))* ryj;
        }
        return result;
    }
    if(lowrank == "BFG")
    {
        real[int] result = input;
        for(int i = 0; i < P0solve.ndof; i++)
        {
            result(i) = result(i)* diagFunc[](i);
        }
        for(int j = 0; j < storeCount; j++)
        {
            real[int] sj = sStore(:, j);
            real[int] yj = yStore(:, j);
            real[int] ryj = ryStore(:, j);
            result = result + (1.0 + ((yj'* ryj)/ (sj'* yj)))*((input'* sj)/(sj'* yj))* sj;
            result = result - ((input'* ryj)/(sj'* yj))* sj;
            result = result - ((input'* sj)/(sj'* yj))* ryj;
        }
        return result;
    }
}

for(int loopIndex = 0; loopIndex < storeNum; loopIndex++)
{
    P0solve gradu = 0.0;
    for(int k = 0; k < dataNum; k++){
        P1solve unknown, p1test;
        P1solve yErr = yC[k] - yData[k];
        problem DualEquation(unknown, p1test, solver = Cholesky)
                = int2d(Th)(Grad(unknown)'* Grad(p1test))
                + int2d(Th)(unknown* p1test)
                + int1d(Th)(unknown* p1test/ alpha)
                - int1d(Th)(yErr* p1test/ alpha);
        DualEquation;
        yErr = dx(unknown)* x + dy(unknown)* y/ 0.8/ 0.8;
        yErr = yErr/sqrt(x^2 + y^2/ 0.8^2/ 0.8^2);
        DualEquation;

        gradu = gradu + abs(yU[k])* yU[k]* unknown;
    }

    real[int] Atb = gradu[];
    gradu[] = Rsolver(Atb);

    uGuess = max(min(gradu, 50.0), 0.0);

    if(loopIndex % 5 == 1){
        pic = uGuess;
        plotSave("Example5" + lowrank + loopIndex);
    }

    real residual = 0.0;
    P0solve Ax = 0.0;
    for(int k = 0; k < dataNum; k++){
        P1solve unknown, p1test;
        problem GuessEquation(unknown, p1test, solver = Cholesky)
                = int2d(Th)(Grad(unknown)'* Grad(p1test))
                + int2d(Th)(unknown* p1test)
                + int2d(Th)(uGuess* abs(yU[k])* unknown* p1test)
                - int2d(Th)(fData[k]* p1test);
        while(true)
        {
            GuessEquation;
            real err = sqrt(int2d(Th)((yU[k]-unknown)^2));
            yU[k] = unknown;
            if(err < FemErr* 0.5){break;}
        }
        residual = residual + int1d(Th)((yU[k] - yData[k])^2);

        P1solve yErr = yC[k] - yU[k];
        problem DualEquation(unknown, p1test, solver = Cholesky)
                = int2d(Th)(Grad(unknown)'* Grad(p1test))
                + int2d(Th)(unknown* p1test)
                + int1d(Th)(unknown* p1test/ alpha)
                - int1d(Th)(yErr* p1test/ alpha);
        DualEquation;
        yErr = dx(unknown)* x + dy(unknown)* y/ 0.8/ 0.8;
        yErr = yErr/sqrt(x^2 + y^2/ 0.8^2/ 0.8^2);
        DualEquation;

        Ax = Ax + abs(yU[k])* yU[k]* unknown;
    }
    {
        ofstream file("./residual.txt", append);
        file << sqrt(residual) << " " << loopIndex << endl;
    }

    real[int] yk = Ax[];
    real[int] sk = uGuess[];
    real[int] ryk = Rsolver(yk);

    if(loopIndex == 0){
        P0solve rykF;
        rykF[] = ryk;
        real scale = int2d(Th)(abs(uGuess))/ int2d(Th)(abs(rykF));
        // real scale = sqrt((sk'* sk)/ (ryk'* ryk));
        diagFunc = diagFunc* scale;
        ryk = Rsolver(yk);
    }

    sStore(:, (loopIndex % storeNum)) = sk;
    yStore(:, (loopIndex % storeNum)) = yk;
    ryStore(:, (loopIndex % storeNum)) = ryk;
    storeCount++;
}